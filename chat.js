let WebSocketServer = require('ws').Server;

let webSocketServer = require('websocket').server;
let http = require('http');
let jwt = require('jsonwebtoken');
let mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/sensit');

let Room = require('./models/room');
let Message = require('./models/message');

let clients = [];

let server = http.createServer(function(request, response) {});

server.listen(1338, function() {});

let loremIpsum = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";

function sendDeliveryReciept(message, users, room) {
  for (let i = 0; i < clients.length; i++) {
    let deliverJSON = {
      users: users,
      messageId: message._id,
      deliveredTo: message.deliveredTo,
      room: message.room,
    };

    //console.log(message.deliveredTo);

    let json = JSON.stringify({ type: 'deliver-reciept', data: deliverJSON });

    try {
      // XXX: get new key
      // //console.log(room.users.includes(clients[i].myId));
      // //console.log(room.users);
      // //console.log(clients[i].userId);
      var decoded = jwt.verify(message.token, 'tokenSecret');

      if (room.users.includes(clients[i].userId)) {
        clients[i].send(json);
      }

      // //console.log(clients[i]);
    } catch(err) {
      //console.log(err);
      //console.log('Error in sector 7G');
    }
  }
}

function sendSeenReciept(message, users, room) {
  for (let i = 0; i < clients.length; i++) {
    let deliverJSON = {
      users: users,
      messageId: message._id,
      seenBy: message.seenBy,
      room: message.room,
    };

    //console.log(message.seenBy);

    let json = JSON.stringify({ type: 'seen-reciept', data: deliverJSON });

    try {
      // XXX: get new key
      // //console.log(room.users.includes(clients[i].myId));
      // //console.log(room.users);
      // //console.log(clients[i].userId);
      var decoded = jwt.verify(message.token, 'tokenSecret');

      if (room.users.includes(clients[i].userId)) {
        clients[i].send(json);
      }

      // //console.log(clients[i]);
    } catch(err) {
      //console.log(err);
      //console.log('Error in sector 7G');
    }
  }
}

function sendTypingEvent(message, users, room) {
  for (let i = 0; i < clients.length; i++) {
    let typingJSON = {
      users: users,
      typing: message.typing,
      room: message.room,
      username: message.username,
    };

    let json = JSON.stringify({ type: 'typing', data: typingJSON });

    try {
      // XXX: get new key
      // //console.log(room.users.includes(clients[i].myId));
      // //console.log(room.users);
      // //console.log(clients[i].userId);
      var decoded = jwt.verify(message.token, 'tokenSecret');

      if (room.users.includes(clients[i].userId) && message.userId !== clients[i].userId) {
        clients[i].send(json);
      }

      // //console.log(clients[i]);
    } catch(err) {
      //console.log(err);
      //console.log('Error in sector 7G');
    }
  }
}

/**
 * WebSocket server
 */
let wss = new webSocketServer({
  // http://tools.ietf.org/html/rfc6455#page-6
  httpServer: server
});

wss.on('request', (request) => {
  let connection = request.accept(null, request.origin); 
  let index = clients.push(connection) - 1;

  let roomId = request.resourceURL.query.room;

  console.log(request.resourceURL.query);

  clients[index].userId = request.resourceURL.query.myId;

  if (roomId && typeof roomId !== 'undefined') {
    //console.log((roomId));
    //console.log((request.resourceURL.query.users));
    let users = JSON.parse(request.resourceURL.query.users);

    let room;

    users.push(request.resourceURL.query.myId);

    Room.find({_id: roomId}, (err, rooms) => { 
      if(rooms.length > 0) {
        room = rooms[0];
      } else {
        room = new Room({
          _id: roomId,
          users: users,
          autogenerated: true,
        });

        room.save();
      }

      connection.on('message', (message) => {
      console.log('message1');

        listenForMessages(
          message,
          users,
          room,
          roomId,
          index,
          clients
        )
      });
    }); 
  } else {
    console.log('else');
    connection.on('message', (message) => {
      console.log('message');
        //console.log(message, 'mess');
    });
  }


});

let listenForMessages = (message, users, room, roomId, index, clients) => {
  //console.log(message.utf8Data, 'ss');
  let parsedMessage = JSON.parse(message.utf8Data);

  if (parsedMessage.type === 'delivered') {
    sendDeliveryReciept(parsedMessage.data, users, room);
  } else if (parsedMessage.type === 'seen') {
    sendSeenReciept(parsedMessage.data, users, room);
  } else if (parsedMessage.type === 'typing') {
    sendTypingEvent(parsedMessage.data, users, room);
  } else {
    // we're dealing with a message TODO: add proper logic for message type

    parsedMessage = parsedMessage.data;

    let messageJSON = {
      room: roomId,
      text: parsedMessage.text,
      sentBy: clients[index].userId,
      sentByUsername: parsedMessage.username,
      forUsers: users,
      timestamp: parsedMessage.timestamp,
      sensitive: parsedMessage.sensitive,
      image: parsedMessage.image,
    };

    if (parsedMessage.sensitive) {
      let lengthToGo = parsedMessage.text.length;
      messageJSON.originalText = parsedMessage.text;
      messageJSON.text = '';

      while (lengthToGo > 0) {
        messageJSON.text += loremIpsum.substring(0, lengthToGo);
        lengthToGo -= messageJSON.text.length;
      }
    }

    room.lastMessage = parsedMessage.text;
    room.lastMessageTime = parsedMessage.timestamp;
    room.seenBy = [clients[index].userId];
    room.deliveredTo = [clients[index].userId];

    console.log(messageJSON);
    console.log('fffffffffffffffffff');

    room.save();

    let dbMessage = new Message(messageJSON);

    dbMessage.save((err, message) => {
      messageJSON = message;

      for (let i = 0; i < clients.length; i++) {
        let json = JSON.stringify({ type: 'message', data: messageJSON });

        try {
          // //console.log(room.users.includes(clients[i].myId));
          // //console.log(room.users);
          // //console.log(clients[i].userId);

          // XXX: get new key
          var decoded = jwt.verify(parsedMessage.token, 'tokenSecret');

          if (room.users.includes(clients[i].userId)) {
            clients[i].send(json);
          }

          // //console.log(clients[i]);
        } catch(err) {
          //console.log(err);
          //console.log('Error in sector 7G');
        }
      }
    });
  }
};
